diff --git net/base/schemeful_site.cc net/base/schemeful_site.cc
index b2d0a58ab89a6..2d78c882df762 100644
--- net/base/schemeful_site.cc
+++ net/base/schemeful_site.cc
@@ -39,6 +39,21 @@ SchemefulSite::ObtainASiteResult SchemefulSite::ObtainASite(
   if (IsStandardSchemeWithNetworkHost(origin.scheme())) {
     registerable_domain = GetDomainAndRegistry(
         origin, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES);
+    
+    // For domains in which the eTLD+1 is not canonical, do not use the eTLD+1.
+    // This is for domains like foo.127.1, which has an eTLD+1 of 127.1, but
+    // https://127.1/ == https://127.0.0.1. This is intended as a temporary
+    // hack not to DCHECK for such origins, until the URL spec is updated to
+    // make such domains invalid in URLs.
+    // TODO(https://crbug.com/1157010): Remove once the fetch spec is updated,
+    // and GURL rejects such domains names.
+    url::CanonHostInfo host_info;
+    bool site_domain_is_safe =
+        registerable_domain.empty() || registerable_domain == origin.host() ||
+        registerable_domain ==
+            CanonicalizeHost(registerable_domain, &host_info);
+    if (!site_domain_is_safe)
+      registerable_domain.clear();
   }
 
   // If origin's host's registrable domain is null, then return (origin's
diff --git url/url_canon_ip.cc url/url_canon_ip.cc
index 4a98592012532..55229d6cd6c6e 100644
--- url/url_canon_ip.cc
+++ url/url_canon_ip.cc
@@ -166,7 +166,7 @@ CanonHostInfo::Family DoIPv4AddressToNumber(const CHAR* spec,
       return CanonHostInfo::NEUTRAL;
 
     if (family != CanonHostInfo::IPV4)
-      return CanonHostInfo::BROKEN;
+      return CanonHostInfo::NEUTRAL;
 
     ++existing_components;
 
@@ -176,7 +176,7 @@ CanonHostInfo::Family DoIPv4AddressToNumber(const CHAR* spec,
 
     // If there are more than 4 components, fail.
     if (existing_components == 4)
-      return CanonHostInfo::BROKEN;
+      return CanonHostInfo::NEUTRAL;
 
     current_component_end = current_position - 1;
     --current_position;
@@ -188,7 +188,7 @@ CanonHostInfo::Family DoIPv4AddressToNumber(const CHAR* spec,
   // within an 8-bit field.
   for (int i = existing_components - 1; i > 0; i--) {
     if (component_values[i] > std::numeric_limits<uint8_t>::max())
-      return CanonHostInfo::BROKEN;
+      return CanonHostInfo::NEUTRAL;
     address[existing_components - i - 1] =
         static_cast<unsigned char>(component_values[i]);
   }
@@ -201,7 +201,7 @@ CanonHostInfo::Family DoIPv4AddressToNumber(const CHAR* spec,
 
   // If the last component has residual bits, report overflow.
   if (last_value != 0)
-    return CanonHostInfo::BROKEN;
+    return CanonHostInfo::NEUTRAL;
 
   // Tell the caller how many components we saw.
   *num_ipv4_components = existing_components;
 